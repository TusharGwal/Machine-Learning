# -*- coding: utf-8 -*-
"""Solution_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PaNBmNKxAjTuB5aB24yY6tsh318YzWOG
"""

from sklearn.decomposition import NMF
import numpy as np
import matplotlib.pyplot as plt

"""Lets create the A matrix"""

A = [
     [4,6,5],
     [1,2,3],
     [7,10,7],
     [6,8,4],
     [6,10,11]
    ]
A = np.array(A)

nmf = NMF(n_components=2, init='random', random_state=0)
W = nmf.fit_transform(A)
H = nmf.components_
Q = nmf.max_iter

err = []
WArray = []
HArray = []
for i in range(1,Q):
  nmf = NMF(n_components=2, init='random', random_state=0,max_iter=i)
  WArray.append(nmf.fit_transform(A))
  HArray.append(nmf.components_)
  err.append(nmf.reconstruction_err_)
W = WArray[Q-2]
H = HArray[Q-2]

""" Reconstruction Error Graph"""

plt.plot(err)

"""nonnegative basis matrix B and nonnegative coefficient matrix C in some iterations"""

for i in range(1,Q,30):
  print("Iteration:",i)
  print("nonnegative basis matrix B:\n",WArray[i],"\nnonnegative coefficient matrix C\n",HArray[i],"\n\n")

"""Final result from dot product of B and C"""

np.round(W.dot(H),0)

"""By referring from the above, we can conclude that the resulting matrix is same as the intial A matrix.

## Part 2

If one eigenvalue of the matrix is 0, it implies that its corresponding eigenvector is linearly dependent and using this we can find the linear combinations of matrix A
"""

A = [
     [12,22,41,35],
     [19,20,13,48],
     [11,14,16,29],
     [14,16,14,36]
    ]
A = np.array(A)

S, V =  np.linalg.eig(A)
A[np.round(np.real(S),2)==0,:]

"""Thus, row 3 and 4 are approximate positive linear combinations of other rows of A

**Part 3 Approximate Nonnegative Factorization of A.**
"""

A = [
     [12,22,41,35],
     [19,20,13,48],
     [11,14,16,29],
     [14,16,14,36]
    ]
A = np.array(A)

nmf = NMF(n_components=2, init='random', random_state=0)
B = nmf.fit_transform(A)
C = nmf.components_

print("nonnegative basis matrix B\n",B,"\n\nnonnegative coefficient matrix C\n",C,"\n\nFinal reconstuction error:",nmf.reconstruction_err_)

"""Verification:"""

B.dot(C)

np.round(B.dot(C),2)

"""Referring from the above we can conclude that the non negative factoriztion was correct."""