# -*- coding: utf-8 -*-
"""Solution_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QTKv2bg71sxnq-tmLYRqSrjqun1sHjBA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.image import imread
import os

"""Load the PNG image and convert it to grayscale by taking the average of the RGB values in the image matrix."""

# Load the image
color_image = imread('mandrill_color.png')

# Convert the image to grayscale by averaging the RGB channels
X = np.mean(color_image, axis=-1)

# Display the grayscale image
image_plot = plt.imshow(X, cmap='gray')

"""Utilize Singular Value Decomposition (SVD) for matrix decomposition. It's important to note that the resulting V matrix is transposed."""

U,D,V = np.linalg.svd(X)

U.shape

"""Obtaining the diagonal elements from the matrix represented by Sigma (D)."""

D = np.diag(D)

"""Ploting the diagonal sigma matrix."""

plt.plot(np.diag(D))
plt.xlabel('index')
plt.ylabel('value')
plt.show()

""" function that accepts the U, D, and V matrices and provides both the file size and displays the image. This is achieved by performing matrix multiplication using the U matrix, the diagonal D matrix, and the V matrix."""

def approxImageResonstruct(k,U,D,V):
  Xapp = U[:,:k] @ D[:k,:k] @ V[:k,:] # matrix multiplication of 288 x k * k x k * k * 288 = 288 x 288
  image = plt.imshow(Xapp)
  image.set_cmap('gray')
  plt.title('Image for k = ' + str(k))
  plt.show()
  return ((k*288)+k+(k*288))/(288*288)

sk10 = approxImageResonstruct(10,U,D,V)

"""Generating a DataFrame to store essential parameters,through 'k' values, file sizes, and compression ratios, for each respective 'k.'"""

data = [{'k':10,'compressionratio': sk10}]
table = pd.DataFrame(data)

"""Iterating through the values of K (20, 40, 60) to obtain the necessary parameters."""

dataArray = []
for k in [20,40,60]:
  cR = approxImageResonstruct(k,U,D,V)
  data = {'k': k , 'compressionratio': cR }
  dataArray.append(data)

table.append(dataArray)

"""Based on the above observations, it's evident that the image is nearly pristine. While increasing the value of 'k' would marginally enhance image quality, doing so doesn't seem justified because the image is already well-represented with 'k' set to 60, and the compression ratio remains favorable."""