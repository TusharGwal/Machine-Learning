# -*- coding: utf-8 -*-
"""Solution_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12KcYbDw_fMyQGPqn6fGcf2KbW0irNDJj
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.io
from sklearn.manifold import MDS, Isomap, LocallyLinearEmbedding, SpectralEmbedding

"""
Load the MAT file and reshape the matrix as needed."""

mat = scipy.io.loadmat('face.mat')

X = np.reshape(mat['Y'],(10304,33))
X = X.T

"""Below code displays all the individual facial images within the matrix."""

plt.figure(figsize=(25,8))

plt.suptitle("Face Images", fontsize=18)
for i in list(range(33)):
    plt.axis('off')
    plt.subplot(4, 9, i+1)
    plt.imshow(mat['Y'][:,:,i])
    plt.title('%s' % (i+1))
plt.show()

"""The function below is defined for plotting face images, and we will utilize it for creating multiple plots with different embedding techniques."""

def plot_faces(R,title,subx=4,suby=9,figsize=(25,8)):
  plt.figure(figsize=figsize)
  plt.suptitle(title, fontsize=18)
  i = 0
  for r in R:
      plt.axis('off')
      plt.subplot(subx, suby, i+1)
      i+=1
      plt.imshow(mat['Y'][:,:,r])
      plt.title('%s' % (r+1))
  plt.show()

"""Now, we will examine the MDS embedding based on the top two eigen vectors."""

mds = MDS(n_components=2,max_iter=500, n_init=1)
X_transform_mds = mds.fit_transform(X)

"""We proceed to create a scatter plot for the matrix transformed through MDS embedding."""

plt.scatter(X_transform_mds[:,0],X_transform_mds[:,1])
plt.show()

"""Below code generates a plot of facial ordering based on the first eigenvector, resulting in the following facial order."""

R = X_transform_mds[:,0].argsort()
plot_faces(R,"Face images of MDS-embedding")

"""Multiple faces appear to be incorrectly positioned by MDS. Given the high instability of MDS, we generate three additional maps and present the faces in their correct order in each of these maps"""

mdsTransformArray = [MDS(n_components=2,max_iter=500, n_init=1).fit_transform(X) for i in range(3)]
Rarray = [mdsTransformArray[i][:,0].argsort() for i in range(3)]
plt.figure(figsize=(10,5))
for i in range(3):
  plt.subplot(1,3,i+1)
  plt.scatter(mdsTransformArray[i][:,0],mdsTransformArray[i][:,1])

for i in range(3):
  plot_faces(Rarray[i],f"MDS try"+str(i),1,33,(25,2))

"""Based on the preceding information, it's evident that MDS-embedding doesn't yield satisfactory results since it relies on Euclidean distances for similarity calculations.

Now, we'll investigate the ISOMAP-embedding of the 33 faces using a graph with the k = 5 nearest neighbors.
"""

isomapTransformer = Isomap(n_neighbors=5, n_components=2,max_iter=5000)
X_Isomap_transform = isomapTransformer.fit_transform(X)
R_isomap_order = X_Isomap_transform[:,0].argsort()

plt.scatter(X_Isomap_transform[:,0],X_Isomap_transform[:,1])
plt.show()

"""Faces in the order:"""

plot_faces(R_isomap_order,"Isomap-Embedding faces order",1,33,(25,2))

"""The facial ordering is evident from the information provided above.

Comparison of Isomap vs. Multidimensional Scaling (MDS)
"""

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.scatter(X_transform_mds[:,0],X_transform_mds[:,1])
plt.title("MDS")
plt.subplot(1,2,2)
plt.scatter(X_Isomap_transform[:,0],X_Isomap_transform[:,1])
plt.title("Isomap")
plt.show()

plot_faces(R,"MDS-Embedding faces order",1,33,(25,2))

plot_faces(R_isomap_order,"Isomap-Embedding faces order",1,33,(25,2))

"""Based on the comparison, we observe that the MDS embedding produces inaccurate face orderings, whereas Isomap offers a superior ordering. This improvement can be attributed to Isomap's use of graph distances as opposed to the Euclidean metric for dissimilarity.

Now, let's investigate the Locality Linear Embedding (LLE) of the 33 faces within a k = 5 nearest neighbor graph.
"""

LLETransformer = LocallyLinearEmbedding(n_neighbors=5)
X_LLE_transform = LLETransformer.fit_transform(X)
R_LLE_order = X_LLE_transform[:,0].argsort()

plt.scatter(X_LLE_transform[:,0],X_LLE_transform[:,1])
plt.show()

"""Faces in the order:"""

plot_faces(R_LLE_order,"LLE-Embedding faces order",1,33,(25,2))

"""Comparison: LLE vs Isomap"""

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.scatter(X_Isomap_transform[:,0],X_Isomap_transform[:,1])
plt.title("ISOmap")
plt.subplot(1,2,2)
plt.scatter(X_LLE_transform[:,0],X_LLE_transform[:,1])
plt.title("LLE")
plt.show()

plot_faces(R_LLE_order,"LLE-Embedding faces order",1,33,(25,2))
plot_faces(R_isomap_order,"Isomap-Embedding faces order",1,33,(25,2))

"""Based on the observations above, it is evident that LLE exhibits a more gradual curve compared to Isomap. Additionally, both methods correctly arrange the faces in the desired order.

Let's delve into the Laplacian Eigenmap (LE) embedding of the 33 faces, focusing on the graph with the 5 nearest neighbors.
"""

LETransformer = SpectralEmbedding(n_neighbors=5)
X_LE_transform = LETransformer.fit_transform(X)
R_LE_order = X_LE_transform[:,0].argsort()

plt.scatter(X_LE_transform[:,0],X_LE_transform[:,1])
plt.show()

"""Faces in the order:"""

plot_faces(R_LE_order,"LE-Embedding faces order",1,33,(25,2))

"""Comparing LLE and Isomap"""

plt.figure(figsize=(15,5))

plt.subplot(1,2,1)
plt.scatter(X_LLE_transform[:,0],X_LLE_transform[:,1])
plt.title("LLE")

plt.subplot(1,2,2)
plt.scatter(X_LE_transform[:,0],X_LE_transform[:,1])
plt.title("LE")

plt.show()

plot_faces(R_LE_order,"LLE-Embedding faces order",1,33,(25,2))
plot_faces(R_LLE_order,"LLE-Embedding faces order",1,33,(25,2))

"""Based on the information above, it is evident that Local Linear Embedding (LE) exhibits a notably smoother curve compared to Locally Linear Embedding (LLE). Furthermore, both methods successfully arrange the faces in the correct order.






"""